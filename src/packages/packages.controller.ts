import { Controller, Get, Post, Body, Request, UseGuards, BadRequestException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Package } from './packages.entity';
import { User } from 'src/users/users.entity';
import { JwtAuthGuard } from 'src/auth/jwt-auth.guard';
import { Transaction, TransactionType, TransactionStatus } from 'src/transactions/transactions.entity';

@Controller('packages')
export class PackagesController {
  constructor(
    @InjectRepository(Package) private packagesRepository: Repository<Package>,
    @InjectRepository(User) private usersRepository: Repository<User>,
    @InjectRepository(Transaction) private transactionsRepository: Repository<Transaction>,
  ) {}

  @Get()
  async getPackages() {
    return await this.packagesRepository.find();
  }

  @UseGuards(JwtAuthGuard)
  @Post('buy')
  async buyPackage(@Request() req, @Body() body) {
    const userId = req.user.userId;
    const { packageId } = body;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.usersRepository.findOne({
      where: { id: userId },
      relations: ['package'], // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç
    });

    if (!user) throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
    if (user.package) throw new BadRequestException('–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–∞–∫–µ—Ç');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
    const packageToBuy = await this.packagesRepository.findOne({ where: { id: packageId } });
    if (!packageToBuy) throw new BadRequestException('–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
    if (user.balance < packageToBuy.price) {
      throw new BadRequestException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
    }

    // –í—ã—á–∏—Ç–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–∞–∫–µ—Ç
    user.balance -= packageToBuy.price;
    user.package = packageToBuy;
    await this.usersRepository.save(user);

    // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
    const transaction = new Transaction();
    transaction.user = user;
    transaction.type = TransactionType.PACKAGE_PURCHASE;
    transaction.amount = packageToBuy.price;
    transaction.status = TransactionStatus.APPROVED; // ‚úÖ –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
    await this.transactionsRepository.save(transaction);

    // üîπ **–ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞**
    if (user.referrer_id) {
      const referrer = await this.usersRepository.findOne({
        where: { id: user.referrer_id },
        relations: ['package'],
      });

      if (referrer && referrer.package) {
        const bonusAmount = packageToBuy.referral_bonus;

        // ‚úÖ –°—á–∏—Ç–∞–µ–º –õ–ò–ß–ù–´–ô –ª–∏–º–∏—Ç (package + personalEarningsLimit)
        const earningsLimit = Number(referrer.package.earnings_limit) || 0;
        const personalLimit = Number(referrer.personalEarningsLimit) || 0;
        const totalEarningsLimit = earningsLimit + personalLimit;


        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
        const totalEarned = await this.transactionsRepository
          .createQueryBuilder('transaction')
          .where('transaction.user = :userId', { userId: referrer.id })
          .andWhere('transaction.type = :type', { type: TransactionType.REFERRAL_BONUS })
          .select('SUM(transaction.amount)', 'total')
          .getRawOne();

        const earnedAmount = parseFloat(totalEarned.total) || 0;

        console.log(`üîç –õ–∏–º–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞: ${totalEarningsLimit}, –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${earnedAmount}`);

        // ‚úÖ –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        if (earnedAmount < totalEarningsLimit) {
          referrer.balance += bonusAmount;
          await this.usersRepository.save(referrer);

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const bonusTransaction = new Transaction();
          bonusTransaction.user = referrer;
          bonusTransaction.type = TransactionType.REFERRAL_BONUS;
          bonusTransaction.amount = bonusAmount;
          bonusTransaction.referral_id = user.id; // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞
          await this.transactionsRepository.save(bonusTransaction);

          console.log(`‚úÖ –ë–æ–Ω—É—Å ${bonusAmount} –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${referrer.id}`);
        } else {
          console.log(`‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è.`);
        }
      }
    }

    return { message: '–ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω', package: packageToBuy.name };
  }

}
