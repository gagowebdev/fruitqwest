import { Injectable, NotFoundException, BadRequestException,forwardRef, Inject, ForbiddenException } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { User } from "./users.entity";
import { Repository, MoreThan } from "typeorm";
import * as bcrypt from "bcryptjs"; // –î–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
import { ChangePasswordDto } from "./dto/change-password.dto";
import { AppGateway } from '../app.gateway';
import { StoreItem, StoreItemType } from '../game-store/entities/store-item.entity'; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º StoreItem –∏ StoreItemType
import { UserPurchase } from "../game-store/entities/user-purchase.entity";
import { omit } from 'lodash';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User) // ‚úÖ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    private readonly usersRepository: Repository<User>,

    @Inject(forwardRef(() => AppGateway)) // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º
    private readonly appGateway: AppGateway,

    @InjectRepository(StoreItem) // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    private readonly storeItemRepo: Repository<StoreItem>,

    @InjectRepository(UserPurchase) // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º UserPurchaseRepo
    private readonly userPurchaseRepo: Repository<UserPurchase>,

  ) {}

  async findById(userId: number): Promise<User> {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return user;
  }

  async findByIdWithRelations(userId: number): Promise<User | null> {
    return this.usersRepository.findOne({
      where: { id: userId },
      relations: ['package'], // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º package
    });
  }


  async findByLogin(login: string, requesterId: number): Promise<User | null> {
    if (!requesterId) throw new ForbiddenException('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    return this.usersRepository.findOne({ where: { login } });
  }
  
  
  
  

  async save(user: User): Promise<User> {
    return this.usersRepository.save(user); // ‚ùå –ë–µ–∑ omit
  }

  
  
  

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  async changePassword(userId: number, changePasswordDto: ChangePasswordDto) {
    const { oldPassword, newPassword } = changePasswordDto;
    
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) throw new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
  
    const isOldPasswordValid = await bcrypt.compare(oldPassword, user.password_hash);
    if (!isOldPasswordValid) throw new BadRequestException("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å");
  
    if (oldPassword === newPassword) {
      throw new BadRequestException("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º");
    }
  
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password_hash = hashedPassword;
  
    await this.usersRepository.save(user);
    return { message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" };
  }
  

  async handleClick(userId: number): Promise<{ gameBalance: number, clickValue: number }> {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) return { gameBalance: 0, clickValue: 1 };
  
    const skin = await this.storeItemRepo.findOne({ where: { id: user.skinId, type: StoreItemType.SKIN } });
    const activeMultiplier = await this.userPurchaseRepo.findOne({
      where: { 
        user: { id: userId }, 
        item: { type: StoreItemType.MULTIPLIER },
        expiresAt: MoreThan(new Date()) 
      }, 
      relations: ['item']
    });
  
    const skinMultiplier = skin?.multiplier ?? 1;
    const boostMultiplier = activeMultiplier?.item.multiplier ?? 1;
    const totalMultiplier = skinMultiplier * boostMultiplier;
  
    // üìå –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∫–ª–∏–∫–æ–≤ (–ù–ï —É—á–∏—Ç—ã–≤–∞—è –º–Ω–æ–∂–∏—Ç–µ–ª–∏)
    user.clicks += 1; 
  
    // üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
    user.gameBalance = parseFloat((user.gameBalance + 1 * totalMultiplier).toFixed(2));
  
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const clicksNeededForNextLevel = Math.floor(100 * Math.pow(1.3, user.level - 1));
    if (user.clicks >= clicksNeededForNextLevel) {
      user.level += 1;
      const bonus = (user.level - 1) * 10; // üéÅ –ë–æ–Ω—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: 10, 20, 30...
      user.gameBalance += bonus;
      
      // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket-—Å–æ–æ–±—â–µ–Ω–∏–µ
      this.appGateway.sendLevelUp(user.id, user.level, user.gameBalance, bonus);
    }
    const clickValue = 1 * skinMultiplier * boostMultiplier;
  
    await this.usersRepository.save(user);
    return { gameBalance: user.gameBalance, clickValue };
  }
  







  
  
}
