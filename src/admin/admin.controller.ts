import { 
    Controller, Patch, Delete, Query, Get, Body, UseGuards, Param, Request, NotFoundException, BadRequestException 
  } from '@nestjs/common';
  import { JwtAuthGuard } from 'src/auth/jwt-auth.guard';
  import { RoleGuard } from '../auth/role.guard';
  import { Roles } from '../auth/roles.decorator';
  import { UserRole } from '../users/users.entity';
  import { InjectRepository } from '@nestjs/typeorm';
  import { Repository, MoreThan } from 'typeorm';
  import { Transaction, TransactionType, TransactionStatus, TransactionMethod } from '../transactions/transactions.entity';
  import { UsersService } from '../users/users.service';
  import { UpdateUserDto } from '../users/dto/update-user.dto';
  import { AppGateway } from '../app.gateway';
  import { User } from '../users/users.entity';
  import { UserPurchase } from '../game-store/entities/user-purchase.entity';
  
  @UseGuards(JwtAuthGuard, RoleGuard)
  @Roles(UserRole.ADMIN) // ‚úÖ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
  @Controller('admin')
  export class AdminController {
    constructor(
      private readonly usersService: UsersService,
      private readonly appGateway: AppGateway,
      @InjectRepository(Transaction)
      private readonly transactionsRepository: Repository<Transaction>,
      @InjectRepository(User) private readonly usersRepository: Repository<User>,
      @InjectRepository(UserPurchase)
      private readonly userPurchaseRepository: Repository<UserPurchase>, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞
    ) {}

    @Get() // ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
    getAdminDashboard() {
        return { message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É!' };
    }

    @Get('transactions')
    async getTransactions(@Query() query: { userId?: number; status?: TransactionStatus; minAmount?: number }) {
    const where: any = {};

    if (query.userId) where.user = { id: query.userId };
    if (query.status) where.status = query.status;
    if (query.minAmount) where.amount = MoreThan(query.minAmount);

    const transactions = await this.transactionsRepository.find({ where, relations: ['user'] });
    return { transactions };
    }

    @Patch('transactions/:id/confirm')
    async confirmTransaction(@Param('id') id: number) {
        const transaction = await this.transactionsRepository.findOne({
            where: { id, status: TransactionStatus.CREATED }, // ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è CREATED
        });

        if (!transaction) {
            throw new NotFoundException('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
        }

        transaction.status = TransactionStatus.PENDING; // ‚úÖ –ú–µ–Ω—è–µ–º CREATED ‚Üí PENDING
        await this.transactionsRepository.save(transaction);

        return { message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"', status: transaction.status };
    }


    // ‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"
    @Delete('transactions/:id/cancel')
    async cancelTransaction(@Param('id') id: number) {
        const transaction = await this.transactionsRepository.findOne({
            where: { id, status: TransactionStatus.PENDING },
        });

        if (!transaction) {
            throw new NotFoundException('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
        }

        await this.transactionsRepository.remove(transaction);

        return { message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞' };
    }
  
    // ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–µ–ø–æ–∑–∏—Ç/–≤—ã–≤–æ–¥)
    @Patch('transactions/:id/approve')
    async approveTransaction(@Param('id') id: number) {
      const transaction = await this.transactionsRepository.findOne({
        where: { id, status: TransactionStatus.PENDING },
        relations: ['user'],
      });
  
      if (!transaction) {
        throw new NotFoundException('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      }
  
      const user = transaction.user;
      if (!user) {
        throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
  
      if (transaction.type === TransactionType.DEPOSIT) {
        // ‚úÖ –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
        user.balance = Number(user.balance) + Number(transaction.amount);
        await this.usersService.save(user);
  
        // ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.appGateway.sendBalanceUpdate(user.id, user.balance);
      }
  
      transaction.status = TransactionStatus.APPROVED;
      await this.transactionsRepository.save(transaction);
  
      // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      this.appGateway.sendTransactionUpdate(user.id, transaction.id, transaction.status);
  
      return { message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', status: transaction.status };
    }
  
    // ‚úÖ –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–µ–ø–æ–∑–∏—Ç/–≤—ã–≤–æ–¥)
    @Patch('transactions/:id/reject')
    async rejectTransaction(@Param('id') id: number) {
      const transaction = await this.transactionsRepository.findOne({
        where: { id, status: TransactionStatus.PENDING },
        relations: ['user'],
      });
  
      if (!transaction) {
        throw new NotFoundException('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
      }
  
      const user = transaction.user;
      if (!user) {
        throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
  
      if (transaction.type === TransactionType.WITHDRAWAL) {
        // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞
        user.balance = Number(user.balance) + Number(transaction.amount);
        await this.usersService.save(user);
  
        // ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.appGateway.sendBalanceUpdate(user.id, user.balance);
      }
  
      transaction.status = TransactionStatus.REJECTED;
      await this.transactionsRepository.save(transaction);
  
      // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      this.appGateway.sendTransactionUpdate(user.id, transaction.id, transaction.status);
  
      return { message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', status: transaction.status };
    }

    @Get('users')
    async getUsers(@Query() query: { login?: string; role?: UserRole; minBalance?: number }) {
      const where: any = {};
    
      if (query.login) where.login = query.login;
      if (query.role) where.role = query.role;
      if (query.minBalance) where.balance = MoreThan(query.minBalance);
    
      const users = await this.usersRepository.find({ where });
      return { users };
    }

    @Patch('users/:id')
    async updateUser(@Param('id') id: number, @Body() updateUserDto: UpdateUserDto) {
        const user = await this.usersRepository.findOne({ where: { id } });

        if (!user) {
        throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // ‚úÖ –ó–∞–ø—Ä–µ—â–∞–µ–º –º–µ–Ω—è—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delete (updateUserDto as any).id;

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ (–µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω)
        if (updateUserDto.login) {
            const existingUser = await this.usersService.findByLogin(updateUserDto.login, user.id);
        if (existingUser && existingUser.id !== user.id) {
            throw new BadRequestException('–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç');
        }
        }

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.usersRepository.update(id, updateUserDto);

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.appGateway.sendUserUpdate(user.id, { login: updateUserDto.login ?? user.login, role: updateUserDto.role ?? user.role });

        return { message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã' };
    }


    @UseGuards(JwtAuthGuard, RoleGuard)
    @Roles(UserRole.ADMIN)
    @Get('stats')
    async getAdminStats() {
    // üí∏ –°—É–º–º–∞ –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    const totalApprovedDeposits = await this.transactionsRepository
        .createQueryBuilder('transaction')
        .where('transaction.type = :type', { type: TransactionType.DEPOSIT })
        .andWhere('transaction.status = :status', { status: TransactionStatus.APPROVED })
        .select('SUM(transaction.amount)', 'total')
        .getRawOne();

    // üè¶ –°—É–º–º–∞ –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
    const totalApprovedWithdrawals = await this.transactionsRepository
        .createQueryBuilder('transaction')
        .where('transaction.type = :type', { type: TransactionType.WITHDRAWAL })
        .andWhere('transaction.status = :status', { status: TransactionStatus.APPROVED })
        .select('SUM(transaction.amount)', 'total')
        .getRawOne();

    // üí∞ –û–±—â–∏–π —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const totalUserBalance = await this.usersRepository
        .createQueryBuilder('user')
        .select('SUM(user.balance)', 'total')
        .getRawOne();

    // üïí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤/–≤—ã–≤–æ–¥–æ–≤ (PENDING)
    const pendingTransactions = await this.transactionsRepository.count({
        where: { status: TransactionStatus.PENDING },
    });

    // üõí –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –ø–æ–∫—É–ø–æ–∫ –≤ –∏–≥—Ä–æ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
    const totalStorePurchases = await this.userPurchaseRepository.count();

    // üí≤ –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –±—ã–ª–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    const totalSpentInStore = await this.userPurchaseRepository
        .createQueryBuilder('purchase')
        .leftJoin('purchase.item', 'item')
        .select('SUM(item.price)', 'total')
        .getRawOne();

    // üë• –°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–∏–ª–∏ –ø–∞–∫–µ—Ç
    const usersWithReferralsAndPackage = await this.usersRepository
        .createQueryBuilder('user')
        .where('user.referrer_id IS NOT NULL')
        .andWhere('user.package_id IS NOT NULL')
        .getCount();

    // üìà –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –¥–æ—Ö–æ–¥—É
    const topReferrers = await this.transactionsRepository
    .createQueryBuilder('transaction')
    .leftJoinAndSelect('transaction.user', 'user') // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å —Å `user`
    .select('user.id', 'userId') // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `user.id`
    .addSelect('SUM(transaction.amount)', 'totalEarnings')
    .where('transaction.type = :type', { type: TransactionType.REFERRAL_BONUS })
    .groupBy('user.id') // ‚úÖ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ `user.id`
    .orderBy('totalEarnings', 'DESC')
    .limit(10)
    .getRawMany();


    return {
        totalApprovedDeposits: parseFloat(totalApprovedDeposits.total) || 0,
        totalApprovedWithdrawals: parseFloat(totalApprovedWithdrawals.total) || 0,
        totalUserBalance: parseFloat(totalUserBalance.total) || 0,
        pendingTransactions,
        totalStorePurchases,
        totalSpentInStore: parseFloat(totalSpentInStore.total) || 0,
        usersWithReferralsAndPackage,
        topReferrers,
    };
    }


  }
  