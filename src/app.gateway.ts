import { WebSocketGateway, SubscribeMessage, WebSocketServer } from '@nestjs/websockets';
import { Server } from 'socket.io';
import { Inject, forwardRef } from '@nestjs/common';
import { UsersService } from './users/users.service';
import { GameStoreService } from './game-store/game-store.service';

@WebSocketGateway({ cors: true })
export class AppGateway {
  @WebSocketServer()
  server: Server;

  constructor(
    @Inject(forwardRef(() => UsersService)) // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º
    private readonly usersService: UsersService,

    @Inject(forwardRef(() => GameStoreService))
    private readonly gameStoreService: GameStoreService,
  ) {}

  async handleConnection(client: any) {
    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${client.id}`);
    console.log(`üîç –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${this.server.engine.clientsCount}`);

    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    const userId = client.handshake.auth.userId;
    if (!userId) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –±—É—Å—Ç–µ—Ä—ã
    await this.gameStoreService.checkExpiredBoosters(userId);
  }
  
  handleDisconnect(client: any) {
    console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${client.id}`);
    console.log(`üîç –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${this.server.engine.clientsCount}`);
  }
  

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
  @SubscribeMessage('click')
  async handleClick(client: any, payload: { userId: number }) {
    if (client.clickInProgress) return; // ‚úÖ –ù–µ –¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç—É —Å–ø–∞–º–∏—Ç—å

    client.clickInProgress = true; // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤

    const { gameBalance, clickValue } = await this.usersService.handleClick(payload.userId);
    
    console.log(`üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payload.userId}: ${gameBalance}`);

    this.server.to(`user_${payload.userId}`).emit('game_balance_update', { 
      gameBalance, 
      clickValue // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞
  });

    // setTimeout(() => {
      client.clickInProgress = false; // ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    // }, 1000);
  }


  sendLevelUp(userId: number, newLevel: number, newBalance: number, bonus: number) {
    console.log(`üì° WebSocket: –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ${newLevel} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –±–æ–Ω—É—Å: ${bonus}`);
    
    this.server.to(`user_${userId}`).emit('level_up', { 
      level: newLevel, 
      gameBalance: newBalance,
      bonus, // üéÅ –ü–µ—Ä–µ–¥–∞—ë–º —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞
    });
  }
  



    // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ WebSocket
    sendGameBalanceUpdate(userId: number, newBalance: number) {
      const roundedBalance = parseFloat(newBalance.toFixed(2)); // üìå –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
      console.log(`üì° WebSocket: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${roundedBalance}`);
      this.server.to(`user_${userId}`).emit('game_balance_update', { gameBalance: roundedBalance });
    }
    

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  sendBalanceUpdate(userId: number, newBalance: number) {
    this.server.to(`user_${userId}`).emit('balance_update', { balance: newBalance });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  sendTransactionUpdate(userId: number, transactionId: number, status: string) {
    this.server.to(`user_${userId}`).emit('transaction_update', { transactionId, status });
  }

  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  sendUserUpdate(userId: number, data: { login: string; role: string }) {
    this.server.to(`user_${userId}`).emit('user_update', data);
  }

  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  sendReferralUpdate(userId: number, data: { newReferral: string }) {
    this.server.to(`user_${userId}`).emit('referral_update', data);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –≤—ã–≤–æ–¥–∞
  // sendBalanceDecrease(userId: number, newBalance: number) {
  //   this.server.to(`user_${userId}`).emit('balance_update', { balance: newBalance });
  // }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª
  @SubscribeMessage('subscribe')
  @SubscribeMessage('subscribe')
  handleSubscribe(client: any, payload: { userId: number }) {
    console.log(`üì° –ö–ª–∏–µ–Ω—Ç ${client.id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ user_${payload.userId}`);
    
    // ‚úÖ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π
    client.leaveAll(); 
    
    // ‚úÖ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ä–∞–∑
    client.join(`user_${payload.userId}`);
  }


}
